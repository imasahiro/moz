DEF(Nop)
{
    /* do nothing */
}
DEF(Fail)
{
L_fail:
    FAIL_IMPL();
}
DEF(Alt, mozaddr_t failjump)
{
    AstMachine *ast = AST_MACHINE_GET();
    symtable_t *tbl = SYMTABLE_GET();
    MOZVM_PROFILE_INC(ALT_COUNT);
    PUSH_FRAME(GET_POS(), PC + failjump, ast_save_tx(ast), symtable_savepoint(tbl));
#ifdef MOZVM_DEBUG_NTERM
    // fprintf(stderr, "%-8s alt   SP=%p FP=%p\n",
    //         runtime->C.nterms[nterm_id], SP, FP);
#endif
}
DEF(Succ)
{
    long saved, ast_tx;
    mozpos_t pos;
    moz_inst_t *jump;
    POP_FRAME(pos, jump, ast_tx, saved);
    (void)saved; (void)ast_tx; (void)jump; (void)pos;
}
DEF(Jump, mozaddr_t jump)
{
    JUMP(jump);
}
DEF(Call, uint16_t nterm MOZVM_USE_NTERM, mozaddr_t next, mozaddr_t jump)
{
#ifdef MOZVM_ENABLE_JIT
    (void)nterm;
#endif

#ifdef MOZVM_DEBUG_NTERM
    PUSH(nterm_id);
    nterm_id = nterm;
#endif
    PUSH(PC + next);
#ifdef MOZVM_DEBUG_NTERM
    // fprintf(stderr, "%-8s call  SP=%p FP=%p next=%p, jump=%p\n",
    //         runtime->C.nterms[nterm_id], SP, FP, PC, PC + jump);
#else
    // (void)nterm;
#endif
    JUMP(jump);
}
DEF(Ret, mozaddr_t dummy)
{
    moz_inst_t *next = (moz_inst_t *)POP();
#ifdef MOZVM_DEBUG_NTERM
    // fprintf(stderr, "%-8s ret   SP=%p FP=%p next=%p\n",
    //         runtime->C.nterms[nterm_id], SP, FP, next);
    nterm_id = POP();
#endif
    // asm volatile("int3");
    PC = next;
    (void)dummy;
}
DEF(Pos)
{
    PUSH(GET_POS());
}
DEF(Back)
{
    SET_POS((mozpos_t)POP());
}
DEF(Skip)
{
    AstMachine *ast = AST_MACHINE_GET();
    symtable_t *tbl = SYMTABLE_GET();

    long *saved, *ast_tx;
    moz_inst_t **jump;
    mozpos_t *pos;
    PEEK_FRAME(pos, jump, ast_tx, saved);
#if 0
#ifdef MOZVM_DEBUG_NTERM
    fprintf(stderr, "%-8s skip  SP=%p FP=%p\n",
            runtime->C.nterms[nterm_id], SP, FP);
#endif
    fprintf(stderr, "peek %ld\n", *(FP+0));
    fprintf(stderr, "peek %ld\n", *(FP+1));
    fprintf(stderr, "peek %ld\n", *(FP+2));
    fprintf(stderr, "peek %ld\n", *(FP+3));
    fprintf(stderr, "peek %ld\n", *(FP+4));
#endif
    if (*pos == GET_POS()) {
        FAIL();
    }
    *pos = GET_POS();
    *ast_tx = ast_save_tx(ast);
    *saved  = symtable_savepoint(tbl);
    (void)jump;
}
DEF(Byte, uint8_t ch)
{
    if (*GET_CURRENT() != ch) {
        FAIL();
    }
    CONSUME();
}
DEF(Any)
{
    if (EOS()) {
        FAIL();
    }
    CONSUME();
}
DEF(Str, STRING_t strId)
{
    const char *str = STRING_GET_IMPL(runtime, strId);
    unsigned len = pstring_length(str);
    if (pstring_starts_with(GET_CURRENT(), str, len) == 0) {
        FAIL();
    }
    CONSUME_N(len);
}
DEF(Set, BITSET_t setId)
{
    bitset_t *set = BITSET_GET_IMPL(runtime, setId);
    if (!bitset_get(set, *GET_CURRENT())) {
        FAIL();
    }
    CONSUME();
}
DEF(NByte, uint8_t ch)
{
    if (*GET_CURRENT() == ch) {
        FAIL();
    }
}
DEF(NAny)
{
    if (!EOS()) {
        FAIL();
    }

}
DEF(NStr, STRING_t strId)
{
    const char *str = STRING_GET_IMPL(runtime, strId);
    unsigned len = pstring_length(str);
    if (pstring_starts_with(GET_CURRENT(), str, len) == 1) {
        FAIL();
    }
}
DEF(NSet, BITSET_t setId)
{
    bitset_t *set = BITSET_GET_IMPL(runtime, setId);
    if (bitset_get(set, *GET_CURRENT())) {
        FAIL();
    }
}
DEF(OByte, uint8_t ch)
{
    if (*GET_CURRENT() == ch) {
        CONSUME();
    }
}
DEF(OAny)
{
    /* not implemented */
    ABORT();
}
DEF(OStr, STRING_t strId)
{
    const char *str = STRING_GET_IMPL(runtime, strId);
    unsigned len = pstring_length(str);
    if (pstring_starts_with(GET_CURRENT(), str, len) == 1) {
        CONSUME_N(len);
    }
}
DEF(OSet, BITSET_t setId)
{
    bitset_t *set = BITSET_GET_IMPL(runtime, setId);
    if (bitset_get(set, *GET_CURRENT())) {
        CONSUME();
    }
}
DEF(RByte, uint8_t ch)
{
#ifdef MOZVM_USE_SSE4_2
    SET_POS(pstring_find_not_char(GET_CURRENT(), runtime->tail, ch)
#ifndef MOZVM_USE_POINTER_AS_POS_REGISTER
            - GET_CURRENT()
#endif
            );
#else
    while (*GET_CURRENT() == ch) {
        CONSUME();
    }
#endif
}
DEF(RAny)
{
    /* not implemented */
    ABORT();
}
DEF(RStr, STRING_t strId)
{
    const char *str = STRING_GET_IMPL(runtime, strId);
    unsigned len = pstring_length(str);
    while (pstring_starts_with(GET_CURRENT(), str, len) == 1) {
        CONSUME_N(len);
    }
}
DEF(RSet, BITSET_t setId)
{
    bitset_t *set = BITSET_GET_IMPL(runtime, setId);
    while (bitset_get(set, *GET_CURRENT())) {
        CONSUME();
    }
}
DEF(Consume, int shift)
{
    CONSUME_N(shift);
}
DEF(First, JMPTBL_t tblId)
{
    int *jmpTable = JMPTBL_GET_IMPL(runtime, tblId);
    int jump = jmpTable[(unsigned)*GET_CURRENT()];
    JUMP(jump);
}
DEF(Lookup, uint8_t state, uint16_t memoId, mozaddr_t skip)
{
    MemoEntry_t *entry = memo_get(MEMO_GET(), GET_POS(), memoId, state);
    if (entry) {
        if (entry->failed == MEMO_ENTRY_FAILED) {
            MEMO_DEBUG_FAIL_HIT(memoId);
            FAIL();
        }
        MEMO_DEBUG_HIT(memoId, entry->consumed);
        CONSUME_N(entry->consumed);
        JUMP(skip);
    }
    MEMO_DEBUG_MISS(memoId);
}
DEF(Memo, uint8_t state, uint16_t memoId)
{
    long saved, ast_tx;
    moz_inst_t *jump;
    mozpos_t pos;
    POP_FRAME(pos, jump, ast_tx, saved);
    long length = GET_POS() - pos;
    memo_set(MEMO_GET(), pos, memoId, NULL, length, state);
    MEMO_DEBUG_MEMO(memoId);
    (void)saved; (void)ast_tx; (void)jump;
}
DEF(MemoFail, uint8_t state, uint16_t memoId)
{
    MEMO_DEBUG_MEMOFAIL(memoId);
    memo_fail(MEMO_GET(), GET_POS(), memoId);
    FAIL();
    (void)state; // FIXME MemoFail needs state???
}
DEF(TPush)
{
    AstMachine *ast = AST_MACHINE_GET();
    ast_log_push(ast);
}
DEF(TPop, int8_t index)
{
    AstMachine *ast = AST_MACHINE_GET();
    ast_log_pop(ast, index);
}
DEF(TLeftFold, uint8_t shift)
{
    AstMachine *ast = AST_MACHINE_GET();
    ast_log_swap(ast, GET_POS() + shift);
}
DEF(TNew, uint8_t shift)
{
    AstMachine *ast = AST_MACHINE_GET();
    ast_log_new(ast, GET_POS() + shift);
}
DEF(TCapture, uint8_t shift)
{
    AstMachine *ast = AST_MACHINE_GET();
    ast_log_capture(ast, GET_POS() + shift);
}
DEF(TTag, TAG_t tagId)
{
    tag_t *tag = TAG_GET_IMPL(runtime, tagId);
    AstMachine *ast = AST_MACHINE_GET();
    ast_log_tag(ast, tag);
}
DEF(TReplace, STRING_t strId)
{
    const char *str = STRING_GET_IMPL(runtime, strId);
    AstMachine *ast = AST_MACHINE_GET();
    ast_log_replace(ast, str);
}
DEF(TStart)
{
    AstMachine *ast = AST_MACHINE_GET();
    PUSH(ast_save_tx(ast));
}
DEF(TCommit, int8_t index)
{
    long tx = POP();
    AstMachine *ast = AST_MACHINE_GET();
    ast_commit_tx(ast, index, tx);
}
DEF(TAbort)
{
    /* not implemented */
    ABORT();
}
DEF(TLookup, int8_t index, uint8_t state, uint16_t memoId, mozaddr_t skip)
{
    AstMachine *ast = AST_MACHINE_GET();
    MemoEntry_t *entry = memo_get(MEMO_GET(), GET_POS(), memoId, state);
    if (entry) {
        if (entry->failed == MEMO_ENTRY_FAILED) {
            MEMO_DEBUG_T_FAIL_HIT(memoId);
            FAIL();
        }
        MEMO_DEBUG_T_HIT(memoId, entry->consumed);
        CONSUME_N(entry->consumed);
        ast_log_link(ast, index, entry->result);
        JUMP(skip);
    }
    MEMO_DEBUG_T_MISS(memoId);
}
DEF(TMemo, uint8_t state, uint16_t memoId)
{
    AstMachine *ast = AST_MACHINE_GET();
    long length;
    long saved, ast_tx;
    moz_inst_t *jump;
    mozpos_t pos;
    Node node;
    POP_FRAME(pos, jump, ast_tx, saved);
    length = GET_POS() - pos;
    node = ast_get_last_linked_node(ast);
    MEMO_DEBUG_T_MEMO(memoId);
    memo_set(MEMO_GET(), pos, memoId, node, length, state);
    (void)saved; (void)ast_tx; (void)jump;
}
DEF(SOpen)
{
    symtable_t *tbl = SYMTABLE_GET();
    PUSH(symtable_savepoint(tbl));
}
DEF(SClose)
{
    symtable_t *tbl = SYMTABLE_GET();
    long saved = POP();
    symtable_rollback(tbl, saved);
}
DEF(SMask, TAG_t tagId)
{
    symtable_t *tbl = SYMTABLE_GET();
    tag_t *tableName = TAG_GET_IMPL(runtime, tagId);
    PUSH(symtable_savepoint(tbl));
    symtable_add_symbol_mask(tbl, tableName);
}
DEF(SDef, TAG_t tagId)
{
    symtable_t *tbl = SYMTABLE_GET();
    tag_t *tableName = TAG_GET_IMPL(runtime, tagId);
    token_t captured;
    token_init(&captured, (const char *)POP(), GET_CURRENT());
    symtable_add_symbol(tbl, tableName, &captured);
}
DEF(SIsDef)
{
    /* not implemented */
    ABORT();
}
DEF(SExists, TAG_t tagId)
{
    symtable_t *tbl = SYMTABLE_GET();
    tag_t *tableName = TAG_GET_IMPL(runtime, tagId);
    if (!symtable_has_symbol(tbl, tableName)) {
        FAIL();
    }
}
DEF(SMatch, TAG_t tagId)
{
    symtable_t *tbl = SYMTABLE_GET();
    tag_t *tableName = TAG_GET_IMPL(runtime, tagId);
    token_t t;
    if (symtable_get_symbol(tbl, tableName, &t)) {
        if (token_equal_string(&t, GET_CURRENT())) {
            CONSUME_N(token_length(&t));
            NEXT();
        }
    }
    FAIL();
}
DEF(SIs, TAG_t tagId)
{
    symtable_t *tbl = SYMTABLE_GET();
    tag_t *tableName = TAG_GET_IMPL(runtime, tagId);
    token_t t;
    if (symtable_get_symbol(tbl, tableName, &t)) {
        token_t captured;
        token_init(&captured, (const char *)POP(), GET_CURRENT());
        if (token_equal(&t, &captured)) {
            CONSUME_N(token_length(&t));
            NEXT();
        }
    }
    FAIL();
}
DEF(SIsa, TAG_t tagId)
{
    symtable_t *tbl = SYMTABLE_GET();
    token_t captured;
    tag_t *tableName = TAG_GET_IMPL(runtime, tagId);
    token_init(&captured, (const char *)POP(), GET_CURRENT());
    if (!symtable_contains(tbl, tableName, &captured)) {
        FAIL();
    }
    CONSUME_N(token_length(&captured));
}
DEF(SDefNum)
{
    /* not implemented */
    ABORT();
}
DEF(SCount)
{
    /* not implemented */
    ABORT();
}
DEF(Exit, int8_t status)
{
    return status;
}
DEF(TblJump1, uint16_t tblId)
{
#ifdef MOZVM_USE_JMPTBL
    jump_table1_t *tbl = runtime->C.jumps1 + tblId;
    int jump = jump_table1_jump(tbl, *GET_CURRENT());
    JUMP(jump);
#else
    ABORT();
#endif
}
DEF(TblJump2, uint16_t tblId)
{
#ifdef MOZVM_USE_JMPTBL
    jump_table2_t *tbl = runtime->C.jumps2 + tblId;
    int jump = jump_table2_jump(tbl, *GET_CURRENT());
    JUMP(jump);
#else
    ABORT();
#endif
}
DEF(TblJump3, uint16_t tblId)
{
#ifdef MOZVM_USE_JMPTBL
    jump_table3_t *tbl = runtime->C.jumps3 + tblId;
    int jump = jump_table3_jump(tbl, *GET_CURRENT());
    JUMP(jump);
#else
    ABORT();
#endif
}
DEF(Label)
{
    /* do nothing */
}
